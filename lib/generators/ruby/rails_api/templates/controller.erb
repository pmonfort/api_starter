# frozen_string_literal: true

class <%= "#{plural_name.capitalize}Controller" %> < ApplicationController
<% if actions & %w[show update destroy] %>
  before_action :<%= "set_#{name.downcase}" %>, only: [<%= actions.sort.select { |a| %w[show update destroy].include?(a) }.map { |a| ":#{a}" }.join(', ') %>]
<% end %>

<% if actions.include?('index') %>
  # GET /<%= plural_name %>
  def index
    @<%= plural_name %> = <%= name %>.all

    render json: @<%= plural_name %>
  end

<% end %>
<% if actions.include?('show') %>
  # GET /<%= plural_name %>/1
  def show
    render json: @<%= name_downcase %>
  end

<% end %>
<% if actions.include?('create') %>
  # POST /<%= plural_name %>
  def create
    @<%= name_downcase %> = <%= name %>.new(<%= name_downcase %>_params)

    if @<%= name_downcase %>.save
      render json: @<%= name_downcase %>, status: :created, location: @<%= name_downcase %>
    else
      render json: @<%= name_downcase %>.errors.full_messages, status: :unprocessable_entity
    end
  end

<% end %>
<% if actions.include?('update') %>
  # PATCH/PUT /<%= plural_name %>/1
  def update
    if @<%= name_downcase %>.update(<%= name_downcase %>_params)
      render json: @<%= name_downcase %>
    else
      render json: @<%= name_downcase %>.errors.full_messages, status: :unprocessable_entity
    end
  end

<% end %>
<% if actions.include?('destroy') %>
  # DELETE /<%= plural_name %>/1
  def destroy
    @<%= name_downcase %>.destroy
  end

<% end %>
  private
<% if actions & %w[show update destroy] %>
    # Use callbacks to share common setup or constraints between actions.
    def set_<%= name_downcase %>
      @<%= name_downcase %> = <%= name %>.find(params[:id])
    rescue
      render json: { error: 'not-found' }, status: :not_found
    end

<% end %>
<% if actions & %w[create update] %>
    # Only allow a trusted parameter "white list" through.
    def <%= name_downcase %>_params
      params.require(:<%= name_downcase %>).permit(<%= fields.map { |f| ":#{f['name']}" }.join(', ') %>)
    end
<% end %>
end
