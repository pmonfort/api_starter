# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ProductsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    build(:product).attributes.slice(
      *%w[
        first_day_on_market
        name
        price
      ]
    )
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProductsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let!(:product) { create(:product) }

  describe 'GET #index' do
    it 'returns a success response' do
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: { id: product.id }, session: valid_session
      expect(response).to be_successful
    end

    describe 'wrong id' do
      it '404' do
        get :show, params: { id: -1 }, session: valid_session
        expect(response.status).to eq(404)
      end
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Product' do
        expect do
          post :create, params: { product: valid_attributes }, session: valid_session
        end.to change { Product.count }.by(1)
      end

      it 'renders a JSON response with the new product' do
        post :create, params: {
          product: valid_attributes
        }, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        expect(response.location).to eq(product_url(Product.last))
      end
    end

    describe 'with invalid params' do
      context 'missing required name' do
        it 'renders a JSON response with errors for the new product' do
          post :create, params: {
            product: valid_attributes.reject { |key, _| key == 'name' }
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      before do
        put :update, params: {
          id: product.id,
          product: valid_attributes.merge(id: product.id)
        }, session: valid_session
      end

      it 'updates the requested product' do
        product.reload
        expect(
          product.attributes.select do |key, _|
            valid_attributes.keys.include?(key)
          end
        ).to eq(valid_attributes)
      end

      it 'renders a JSON response with the product' do
        expect(response).to be_successful
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    describe 'with invalid params' do
      context 'with name set to nil' do
        it 'renders a JSON response with errors' do
          put :update, params: {
            id: product.id,
            product: valid_attributes.merge({ 'name' => nil })
          }, session: valid_session
          error_messages = JSON.parse(response.body)
          expect(response).to have_http_status(:unprocessable_entity)
          expect(error_messages.count).to eq(1)
          expect(error_messages).to include('Name can\'t be blank')
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested product' do
      expect do
        delete :destroy, params: { id: product.id }, session: valid_session
      end.to change { Product.count }.by(-1)
    end
  end
end
