# frozen_string_literal: true

require './spec/spec_helper'

RSpec.describe <%= "API::#{plural_name.capitalize}Controller" %> do
  # This should return the minimal set of attributes required to create a valid
  # <%= name %>. As you add validations to <%= name %>, be sure to
  # adjust the attributes here as well.
<% # TODO Add a spec with a resource without create and update actions %>
<% unless (actions & %w[create update]).empty? %>
  let(:valid_attributes) do
    build(:<%= name_downcase %>).attributes.slice(
      *%w[
<%   fields.map do |field| %>
        <%= field['name'] %>
<%   end %>
      ]
    )
  end
<% end %>

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # <%= "#{plural_name.capitalize}Controller" %>. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let!(:<%= name_downcase %>) { create(:<%= name_downcase %>) }

<% if actions.include?('index') %>
  describe 'GET <%= "/#{plural_name}" %>' do
    it 'returns a success response' do
      get '<%= "/#{plural_name}" %>', {}, session: valid_session
      expect(last_response).to be_successful
    end
  end

<% end %>
<% if actions.include?('show') %>
  describe 'GET <%= "/#{plural_name}/:id" %>' do
    it 'returns a success response' do
      get "/<%= plural_name %>/#{<%= name_downcase %>.id}", {}, session: valid_session
      expect(last_response).to be_successful
    end

    describe 'wrong id' do
      it '404' do
        get '<%= "/#{plural_name}/-1" %>', {}, session: valid_session
        expect(last_response.status).to eq(404)
      end
    end
  end

<% end %>
<% if actions.include?('create') %>
  describe 'POST <%= "/#{plural_name}" %>' do
    context 'with valid params' do
      it 'creates a new <%= name %>' do
        expect do
          post '<%= "/#{plural_name}" %>', {
            <%= name_downcase %>: valid_attributes
          }, session: valid_session
        end.to change { <%= name %>.count }.by(1)
      end

      it 'renders a JSON response with the new <%= name_downcase %>' do
        post '<%= "/#{plural_name}" %>', {
          <%= name_downcase %>: valid_attributes
        }, session: valid_session
        expect(last_response.status).to eq(201)
        expect(last_response.content_type).to eq('application/json')
      end
    end

    describe 'with invalid params' do
<%   required_fields.each_with_index do |field, index| %>
      context 'missing required <%= field['name'].downcase %>' do
        it 'renders a JSON response with errors for the new <%= name_downcase %>' do
          post '<%= "/#{plural_name}" %>', {
            <%= "#{name_downcase}" %>: valid_attributes.reject { |key, _| key == '<%= field['name'].downcase %>' }
          }, session: valid_session
          expect(last_response.status).to eq(400)
          expect(last_response.content_type).to eq('application/json')
        end
      end
<%     unless index == required_fields.size - 1 %>

<%     end %>
<%   end %>
    end
  end

<% end %>
<% if actions.include?('update') %>
  describe 'PUT <%= "/#{plural_name}/:id" %>' do
    context 'with valid params' do
      before do
        put "/<%= plural_name %>/#{<%= name_downcase %>.id}", {
          <%= "#{name_downcase}" %>: valid_attributes
        }, session: valid_session
      end

      it 'updates the requested <%= name_downcase %>' do
        <%= name_downcase %>.reload
        expect(
          <%= name_downcase %>.attributes.select do |key, _|
            valid_attributes.keys.include?(key)
          end
        ).to eq(valid_attributes)
      end

      it 'renders a JSON response with the <%= name_downcase %>' do
        expect(last_response).to be_successful
        expect(last_response.content_type).to eq('application/json')
      end
    end

    describe 'with invalid params' do
<%   required_fields.each_with_index do |field, index| %>
<%     field_name = field['type'] == 'foreign_key' ? field['name'].gsub('_id', '') : field['name'] %>
      context 'with <%= field['name'].downcase %> set to nil' do
        it 'renders a JSON response with errors' do
          put "/<%= plural_name %>/#{<%= name_downcase %>.id}", {
            <%= "#{name_downcase}" %>: valid_attributes.merge({ <%= field['name'].downcase %>: nil })
          }, session: valid_session
          error_messages = JSON.parse(last_response.body)['message']
          expect(last_response.status).to eq(400)
<%     if field['type'] == 'email' %>
          expect(error_messages.count).to eq(2)
<%     else %>
          expect(error_messages.count).to eq(1)
<%     end %>
          expect(error_messages[0]).to eq('<%= field_name.capitalize %> can\'t be blank')
          expect(last_response.content_type).to eq('application/json')
        end
      end
<%     unless index == required_fields.size - 1 %>

<%     end %>
<%   end %>
    end
  end
<%   if actions.include?('delete') %>

<%   end %>
<% end %>
<% if actions.include?('delete') %>
  describe 'DELETE <%= "/#{plural_name}/:id" %>' do
    it 'delete the requested <%= name_downcase %>' do
      expect do
        delete "/<%= plural_name %>/#{<%= name_downcase %>.id}", {}, session: valid_session
      end.to change { <%= name %>.count }.by(-1)
    end
  end
<% end %>
end
