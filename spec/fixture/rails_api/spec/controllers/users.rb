# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      age: Faker::Number.number(digits: 2),
      birthday: Faker::Date.birthday(min_age: 18, max_age: 65),
      company_id: create(:company).id,
      email: Faker::Internet.email,
      first_name: Faker::Name.name,
      last_name: Faker::Name.name,
      password: Faker::Internet.password
    }
  end

  # Missing required field params

  let(:invalid_missing_required_param_birthday) do
    {
      age: Faker::Number.number(digits: 2),
      company_id: create(:company).id,
      email: Faker::Internet.email,
      first_name: Faker::Name.name,
      last_name: Faker::Name.name,
      password: Faker::Internet.password,
    }
  end

  let(:invalid_missing_required_param_company_id) do
    {
      age: Faker::Number.number(digits: 2),
      birthday: Faker::Date.birthday(min_age: 18, max_age: 65),
      email: Faker::Internet.email,
      first_name: Faker::Name.name,
      last_name: Faker::Name.name,
      password: Faker::Internet.password,
    }
  end

  let(:invalid_missing_required_param_email) do
    {
      age: Faker::Number.number(digits: 2),
      birthday: Faker::Date.birthday(min_age: 18, max_age: 65),
      company_id: create(:company).id,
      first_name: Faker::Name.name,
      last_name: Faker::Name.name,
      password: Faker::Internet.password,
    }
  end

  let(:invalid_missing_required_param_password) do
    {
      age: Faker::Number.number(digits: 2),
      birthday: Faker::Date.birthday(min_age: 18, max_age: 65),
      company_id: create(:company).id,
      email: Faker::Internet.email,
      first_name: Faker::Name.name,
      last_name: Faker::Name.name,
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let!(:user) { create(:user) }

  describe 'GET #index' do
    it 'returns a success response' do
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: {id: user.id}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new User' do
        expect do
          post :create, params: {user: valid_attributes}, session: valid_session
        end.to change(User, :count).by(1)
      end

      it 'renders a JSON response with the new user' do
        post :create, params: {user: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        expect(response.location).to eq(user_url(User.last))
      end
    end

    describe 'with invalid params' do
      context 'missing required birthday' do
        it 'renders a JSON response with errors for the new user' do
          post :create, params: {
            user: invalid_missing_required_param_birthday
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end

      context 'missing required company_id' do
        it 'renders a JSON response with errors for the new user' do
          post :create, params: {
            user: invalid_missing_required_param_company_id
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end

      context 'missing required email' do
        it 'renders a JSON response with errors for the new user' do
          post :create, params: {
            user: invalid_missing_required_param_email
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end

      context 'missing required password' do
        it 'renders a JSON response with errors for the new user' do
          post :create, params: {
            user: invalid_missing_required_param_password
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        skip('Add a hash of attributes valid for your model')
      }

      it 'updates the requested user' do
        skip
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: new_attributes}, session: valid_session
        user.reload
        skip('Add assertions for updated state')
      end

      it 'renders a JSON response with the user' do
        skip
        user = User.create! valid_attributes

        put :update, params: {id: user.to_param, user: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the user' do
        skip
        user = User.create! valid_attributes

        put :update, params: {id: user.to_param, user: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    describe 'with invalid params' do
      context 'missing required birthday' do
        it 'renders a JSON response with errors for the new user' do
          post :create, params: {
            user: invalid_missing_required_param_birthday
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end

      context 'missing required company_id' do
        it 'renders a JSON response with errors for the new user' do
          post :create, params: {
            user: invalid_missing_required_param_company_id
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end

      context 'missing required email' do
        it 'renders a JSON response with errors for the new user' do
          post :create, params: {
            user: invalid_missing_required_param_email
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end

      context 'missing required password' do
        it 'renders a JSON response with errors for the new user' do
          post :create, params: {
            user: invalid_missing_required_param_password
          }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json; charset=utf-8')
        end
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested user' do
      expect {
        delete :destroy, params: {id: user.id}, session: valid_session
      }.to change(User, :count).by(-1)
    end
  end
end
